{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1a7a8410",
   "metadata": {
    "papermill": {
     "duration": 0.004459,
     "end_time": "2024-09-20T22:17:08.391946",
     "exception": false,
     "start_time": "2024-09-20T22:17:08.387487",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Demystifying Generative Learning: Why ChatGPT canâ€™t do maths or become SkyNet\n",
    "\n",
    "This is a lunch & learn talk which is intended as a high level overview of Generative AI for those unfamilar with machine learning or coding\n",
    "\n",
    "- I create a small domain for a toy problem\n",
    "- Create a classifier which given 3 words can predict the next word in a sentence\n",
    "- Visualise the training data we use for this classifier\n",
    "- Demonstrate the performance of the model, showing the strengths and weaknesses\n",
    "- Give some examples of the difference between our example and real world use."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68dd812f",
   "metadata": {
    "papermill": {
     "duration": 0.003545,
     "end_time": "2024-09-20T22:17:08.399568",
     "exception": false,
     "start_time": "2024-09-20T22:17:08.396023",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Task\n",
    "We would like to create a generative ai which can write simple stories & perform some basic maths.\n",
    "\n",
    "## Solution\n",
    "We create a mathmatical model which given 3 words in a sentence tries to predict which word will come next."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fb9b60c",
   "metadata": {
    "papermill": {
     "duration": 0.003368,
     "end_time": "2024-09-20T22:17:08.406568",
     "exception": false,
     "start_time": "2024-09-20T22:17:08.403200",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## A human example\n",
    "Given three words predict the next word\n",
    "\n",
    "2+1 ...\n",
    "\n",
    "1+2 ...\n",
    "\n",
    "The cat sat ...\n",
    "\n",
    "ran from the...\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "faa1ffc9",
   "metadata": {
    "papermill": {
     "duration": 0.003269,
     "end_time": "2024-09-20T22:17:08.413427",
     "exception": false,
     "start_time": "2024-09-20T22:17:08.410158",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Collect Data\n",
    "- The cat sat on the mat\n",
    "- The rat sat on the mat\n",
    "- the rat ran from the cat\n",
    "- the bat sat on the cat\n",
    "- 1+2=3\n",
    "- 2+1=3\n",
    "- 2+2=4\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16894ec0",
   "metadata": {
    "papermill": {
     "duration": 0.003271,
     "end_time": "2024-09-20T22:17:08.420375",
     "exception": false,
     "start_time": "2024-09-20T22:17:08.417104",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2. Processing our data to create examples for our model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e52f98c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-20T22:17:08.429659Z",
     "iopub.status.busy": "2024-09-20T22:17:08.429118Z",
     "iopub.status.idle": "2024-09-20T22:17:08.448133Z",
     "shell.execute_reply": "2024-09-20T22:17:08.446890Z"
    },
    "papermill": {
     "duration": 0.026875,
     "end_time": "2024-09-20T22:17:08.450780",
     "exception": false,
     "start_time": "2024-09-20T22:17:08.423905",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Given 3 words, what is the next word in for each sentence in our training data\n",
    "# input = Three Words\n",
    "# output = Next Word\n",
    "# tag = labelling our data which of our two domains it is from.\n",
    "dataset = [\n",
    "    { \"input\": [\"\", \"\", \"the\"], \"output\": \"cat\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"\", \"the\", \"cat\"], \"output\": \"sat\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"the\", \"cat\", \"sat\"], \"output\": \"on\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"cat\", \"sat\", \"on\"], \"output\": \"the\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"sat\", \"on\", \"the\"], \"output\": \"mat\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"on\", \"the\", \"mat\"], \"output\": \".\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"\", \"\", \"the\"], \"output\": \"rat\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"\", \"the\", \"rat\"], \"output\": \"sat\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"the\", \"rat\", \"sat\"], \"output\": \"on\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"rat\", \"sat\", \"on\"], \"output\": \"the\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"sat\", \"on\", \"the\"], \"output\": \"mat\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"on\", \"the\", \"mat\"], \"output\": \".\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"\", \"\", \"the\"], \"output\": \"bat\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"\", \"the\", \"bat\"], \"output\": \"sat\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"the\", \"bat\", \"sat\"], \"output\": \"on\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"bat\", \"sat\", \"on\"], \"output\": \"the\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"sat\", \"on\", \"the\"], \"output\": \"cat\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"on\", \"the\", \"cat\"], \"output\": \".\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"\", \"\", \"the\"], \"output\": \"rat\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"\", \"the\", \"rat\"], \"output\": \"ran\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"the\", \"rat\", \"ran\"], \"output\": \"from\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"rat\", \"ran\", \"from\"], \"output\": \"the\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"ran\", \"from\", \"the\"], \"output\": \"cat\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"from\", \"the\", \"cat\"], \"output\": \".\", \"tag\": \"story\"},\n",
    "    { \"input\": [\"1\", \"+\", \"2\"], \"output\": \"3\", \"tag\": \"math\"},\n",
    "    { \"input\": [\"2\", \"+\", \"1\"], \"output\": \"3\", \"tag\": \"math\"},\n",
    "    { \"input\": [\"2\", \"+\", \"2\"], \"output\": \"4\", \"tag\": \"math\"},\n",
    "\n",
    "\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d1f311b",
   "metadata": {
    "papermill": {
     "duration": 0.003542,
     "end_time": "2024-09-20T22:17:08.458216",
     "exception": false,
     "start_time": "2024-09-20T22:17:08.454674",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3. Making our example numeric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "867edfc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-20T22:17:08.467679Z",
     "iopub.status.busy": "2024-09-20T22:17:08.467282Z",
     "iopub.status.idle": "2024-09-20T22:17:09.048227Z",
     "shell.execute_reply": "2024-09-20T22:17:09.047332Z"
    },
    "papermill": {
     "duration": 0.588724,
     "end_time": "2024-09-20T22:17:09.050844",
     "exception": false,
     "start_time": "2024-09-20T22:17:08.462120",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x640 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from matplotlib.pyplot import figure\n",
    "\n",
    "\n",
    "# We assign each word in our domain to a number so we can create a mathmatically model.\n",
    "wordIndices = {\n",
    "    \"\": 0,\n",
    "    \"1\": 1,\n",
    "    \"2\": 2,\n",
    "    \"3\": 3,\n",
    "    \"4\": 4,\n",
    "    \"-\": 5,\n",
    "    \"+\": 6,\n",
    "    \"=\": 7,\n",
    "    \"the\": 8,\n",
    "    \"cat\": 9,\n",
    "    \"rat\": 10,\n",
    "    \"bat\": 11,\n",
    "    \"sat\": 12,\n",
    "    \"ran\": 13,\n",
    "    \"on\": 14,\n",
    "    \"from\": 15, \n",
    "    \"mat\": 16,\n",
    "    \".\": 17\n",
    "}\n",
    "\n",
    "def wordNumber(word):\n",
    "    return wordIndices[word]\n",
    "\n",
    "def numberToWord(num):\n",
    "    return list(wordIndices.keys())[list(wordIndices.values()).index(num)]\n",
    "        \n",
    "# ax = plt.figure(figsize=(15, 15), dpi=80).add_subplot(projection='3d')\n",
    "\n",
    "# for word in wordIndices.keys():\n",
    "#     examplesWithOutput = list(filter(lambda x: x['output'] == word,  dataset))\n",
    "#     xs = list(map(lambda l: wordNumber(l['input'][0]), examplesWithOutput))\n",
    "#     ys = list(map(lambda l: wordNumber(l['input'][1]), examplesWithOutput))\n",
    "#     zs = list(map(lambda l: wordNumber(l['input'][2]), examplesWithOutput))\n",
    "#     os = list(map(lambda l: l['output'], examplesWithOutput))  \n",
    "#     if len(os) > 0:\n",
    "#         ax.scatter(xs, ys, zs,  marker='o', label=word)\n",
    "    \n",
    "# ax.set_xlabel(\"Word One\")\n",
    "# ax.set_ylabel(\"Word Two\")\n",
    "# ax.set_zlabel(\"Word Three\")\n",
    "\n",
    "# x = np.array(range(16))\n",
    "# ax.set_xticks(x, list(map(lambda x: numberToWord(x), range(16))))\n",
    "# ax.set_yticks(x, list(map(lambda x: numberToWord(x), range(16))))\n",
    "# ax.set_zticks(x, list(map(lambda x: numberToWord(x), range(16))))\n",
    "\n",
    "\n",
    "# plt.legend(loc=\"upper left\")\n",
    "# plt.show()\n",
    "\n",
    "ax = plt.figure(figsize=(8, 8), dpi=80).add_subplot()\n",
    "\n",
    "for word in wordIndices.keys():\n",
    "    examplesWithOutput = list(filter(lambda x: x['input'][2]== word,  dataset))\n",
    "    xs = list(map(lambda l: wordNumber(l['input'][0]), examplesWithOutput))\n",
    "    ys = list(map(lambda l: wordNumber(l['input'][1]), examplesWithOutput))\n",
    "    os = list(map(lambda l: l['input'][2], examplesWithOutput))  \n",
    "    if len(os) > 0:\n",
    "        ax.scatter(xs, ys, marker='o', label=word)\n",
    "    \n",
    "ax.set_xlabel(\"Word One\")\n",
    "ax.set_ylabel(\"Word Two\")\n",
    "\n",
    "x = np.array(range(16))\n",
    "ax.set_xticks(x, list(map(lambda x: numberToWord(x), range(16))))\n",
    "ax.set_yticks(x, list(map(lambda x: numberToWord(x), range(16))))\n",
    "\n",
    "\n",
    "plt.legend(loc=\"upper left\")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b0dad99",
   "metadata": {
    "papermill": {
     "duration": 0.003964,
     "end_time": "2024-09-20T22:17:09.059175",
     "exception": false,
     "start_time": "2024-09-20T22:17:09.055211",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3. Create a statistical model for our data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cc63d95a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-20T22:17:09.070019Z",
     "iopub.status.busy": "2024-09-20T22:17:09.069617Z",
     "iopub.status.idle": "2024-09-20T22:17:39.538945Z",
     "shell.execute_reply": "2024-09-20T22:17:39.537518Z"
    },
    "papermill": {
     "duration": 30.487285,
     "end_time": "2024-09-20T22:17:39.551217",
     "exception": false,
     "start_time": "2024-09-20T22:17:09.063932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MLPClassifier(alpha=1e-05, hidden_layer_sizes=(100, 100), max_iter=1000000,\n",
       "              random_state=1, solver=&#x27;lbfgs&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MLPClassifier</label><div class=\"sk-toggleable__content\"><pre>MLPClassifier(alpha=1e-05, hidden_layer_sizes=(100, 100), max_iter=1000000,\n",
       "              random_state=1, solver=&#x27;lbfgs&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "MLPClassifier(alpha=1e-05, hidden_layer_sizes=(100, 100), max_iter=1000000,\n",
       "              random_state=1, solver='lbfgs')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "\n",
    "input = list(map(lambda x: [wordNumber(x[\"input\"][0]), wordNumber(x[\"input\"][1]), wordNumber(x[\"input\"][2])], dataset))\n",
    "output = list(map(lambda x: wordNumber(x[\"output\"]), dataset))\n",
    "\n",
    "clf = MLPClassifier(solver='lbfgs', alpha=1e-5,\n",
    "                    hidden_layer_sizes=(100, 100), random_state=1, max_iter=1000000)\n",
    "\n",
    "clf.fit(input, output)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9a8304fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-20T22:17:39.588553Z",
     "iopub.status.busy": "2024-09-20T22:17:39.587758Z",
     "iopub.status.idle": "2024-09-20T22:17:39.604899Z",
     "shell.execute_reply": "2024-09-20T22:17:39.603951Z"
    },
    "papermill": {
     "duration": 0.040105,
     "end_time": "2024-09-20T22:17:39.608464",
     "exception": false,
     "start_time": "2024-09-20T22:17:39.568359",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mat\n"
     ]
    }
   ],
   "source": [
    "word1 = \"2\"\n",
    "word2 = \"-\"\n",
    "word3 = \"2\"\n",
    "\n",
    "\n",
    "i = clf.predict([[wordNumber(word1), wordNumber(word2), wordNumber(word3)]])\n",
    "print(numberToWord(i))\n",
    "\n",
    "# the bat ran on the cat\n",
    "# 1+2=3\n",
    "# 2+1=3\n",
    "# 1+1=3?\n",
    "# 1-1=3\n",
    "# 2-2=mat"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48a750d0",
   "metadata": {
    "papermill": {
     "duration": 0.0123,
     "end_time": "2024-09-20T22:17:39.628128",
     "exception": false,
     "start_time": "2024-09-20T22:17:39.615828",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Summary of the steps we took\n",
    "1. Collected data\n",
    "2. Processed our data to create examples for our model\n",
    "3. Made our examples numberic\n",
    "3. Create a statistical model for our data\n",
    "4. ???\n",
    "5. Profit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fb35c29",
   "metadata": {
    "papermill": {
     "duration": 0.007978,
     "end_time": "2024-09-20T22:17:39.643468",
     "exception": false,
     "start_time": "2024-09-20T22:17:39.635490",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Next Steps for World Domination\n",
    "1. More data!! Data mine the internet\n",
    "2. Increasing the complexity of our statistical model. We could use 10 words and predict the 11th?\n",
    "3. Automate all our processes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9fb0e678",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-20T22:17:39.661421Z",
     "iopub.status.busy": "2024-09-20T22:17:39.660805Z",
     "iopub.status.idle": "2024-09-20T22:17:39.679327Z",
     "shell.execute_reply": "2024-09-20T22:17:39.678076Z"
    },
    "papermill": {
     "duration": 0.031244,
     "end_time": "2024-09-20T22:17:39.682814",
     "exception": false,
     "start_time": "2024-09-20T22:17:39.651570",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cat\n",
      "cat\n",
      "ran\n",
      "on\n",
      "the\n",
      "cat\n",
      ".\n",
      "from\n",
      "mat\n",
      "the\n",
      "cat\n",
      ".\n",
      "from\n",
      "mat\n",
      "the\n",
      "cat\n",
      ".\n",
      "from\n",
      "mat\n",
      "the\n"
     ]
    }
   ],
   "source": [
    "# Keep generating...\n",
    "word1 = \"\"\n",
    "word2 = \"\"\n",
    "word3 = \"\"\n",
    "\n",
    "for i in range(20):\n",
    "    i = clf.predict([[wordNumber(word1), wordNumber(word2), wordNumber(word3)]])\n",
    "    print(numberToWord(i))\n",
    "    word1 = word2\n",
    "    word2 = word3\n",
    "    word3 = numberToWord(i)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 34.753737,
   "end_time": "2024-09-20T22:17:40.214530",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-20T22:17:05.460793",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
